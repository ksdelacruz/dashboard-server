<?php
namespace MyApp;
use Ratchet\MessageComponentInterface;
use Ratchet\ConnectionInterface;
use React\EventLoop\StreamSelectLoop as Loop;

class Dashboard implements MessageComponentInterface 
{
	protected $clients;
    private $host = null; // Sets the host
    private $isAutomated = false; // Switch for automated sending of alert release on web
                                  // every four hours or if there's an onset
    private $json = null; // Variable repository of alerts json generated by MT scripts
    private $alerts = array( 'latest' => null, 'extended' => null, 'overdue' => null );
                        // Variable repository for alert entries from database

	public function __construct(Loop $loop) {
	    $this->clients = new \SplObjectStorage;
	    echo "Congratulations! the server is now running\n";

        date_default_timezone_set("Asia/Manila");
        $loop->addPeriodicTimer(60, function() { // 1-minute loop
            
            $date = date_create();
            echo date_format($date, 'Y-m-d H:i:s ');
            echo "Looping every 1 minute...\n";

            $hasUpdate = false; // variable that tell if there's a new json data
            // Update json variable ONLY IF there is 1 or more connected client
            if( count($this->clients) >= 1 ) {
                $hasUpdate = $this->updateJSON();
            } else {
                echo "No connected client.\n";
            }

            if($hasUpdate) {
                $this->getAlertsFromDatabase();
                $this->processAlerts();
                foreach ($this->clients as $client) {
                   //$this->sendJSON($client);
                }
            }
        });
	}

    public function onOpen(ConnectionInterface $conn) {
    	// Store the new connection to send messages to later
	    $this->clients->attach($conn);

        $this->host = $conn->WebSocket->request->getHeader('Origin');

        if( count($this->clients) == 1 ) {
            $this->updateJSON();
            $this->getAlertsFromDatabase();
        }

        $this->processAlerts();

        // Send JSON after connecting
        $this->sendJSON($conn);
        $data = $this->getNormalAndLockedIssues($conn);
        $conn->send(json_encode($data));

	    echo "New connection! ({$conn->resourceId})\n";
    }

    public function onMessage(ConnectionInterface $from, $msg) {
    	$numRecv = count($this->clients) - 1;
    	echo sprintf('Connection %d sending message "%s" to %d other connection%s' . "\n", $from->resourceId, $msg, $numRecv, $numRecv == 1 ? '' : 's');

        $msg = json_decode($msg);
        $code = $msg->code;
        $vars = $msg->data;

        if($code == "getOnGoingAndExtended") {
            $data = $this->getAlertsFromDatabase();

        } elseif ($code == "getNormalAndLockedIssues") { // FUNCTION FOR ISSUES AND REMINDERS
            $data = $this->getNormalAndLockedIssues();
        }

        if( isset($data) ) {
            foreach ($this->clients as $client) {
                $client->send(json_encode($data));
            }
        }
            
    	// foreach ($this->clients as $client) {
	    //     if ($from !== $client) {
	    //         // The sender is not the receiver, send to each client connected
	    //         $client->send($code);
	    //     }
	    // }
    }

    public function onClose(ConnectionInterface $conn) {
    	// The connection is closed, remove it, as we can no longer send it messages
    	$this->clients->detach($conn);

    	echo "Connection {$conn->resourceId} has disconnected\n";
    }

    public function onError(ConnectionInterface $conn, \Exception $e) {
    	echo "An error has occurred: {$e->getMessage()}\n";

    	$conn->close();
    }


    /************************
     * 
     *      FUNCTIONS 
     * 
     ***********************/

    public function sendJSON($client) {

        $data = array(
            'code' => 'getJSONandLastRelease',
            'alert_json' => json_decode($this->json),
        );
            
        if($this->json === FALSE) $data['is_bad'] = "ERROR: Problem with opening JSON";
        //$client->send(json_encode($data));
    }

    public function updateJSON() {

        if(strpos($this->host, "swatqa") == true) $host = "http://www.dewslandslide.com";
        else $host = $this->host;

        $temp_json = file_get_contents($host . '/temp/data/PublicAlert.json');

        if( $this->json !== $temp_json ) {
            $this->json = $temp_json;
            return true;
        }
        else { 
            echo "No new data from alert JSON\n";
            return false;
        }
    }

    public function getAlertsFromDatabase()
    {
        if(strpos($this->host, "swatqa") == true) $this->host = "http://192.168.150.165";
        else $host = $this->host;

        $alerts = json_decode( file_get_contents($host . '/monitoring/getOnGoingAndExtended') );

        // $data = array(
        //     'code' => 'getOnGoingAndExtended',
        //     'ongoing' => $alerts
        // );

        $this->alerts['latest'] = $alerts->latest;
        $this->alerts['extended'] = $alerts->extended;
        $this->alerts['overdue'] = $alerts->overdue;

        // return $data;
    }

    public function processAlerts()
    {
        $path = "C:/xampp/htdocs/js/dewslandslide/public_alert/";
        file_put_contents($path . "alert_json.json", $this->json);
        file_put_contents($path . "alerts.json", json_encode($this->alerts));
        // $url = 'http://localhost/monitoring/processAlerts';
        // $data = array('alerts' => $this->alerts, 'json' => $this->json );
        // $options = array(
        //     'http' => array(
        //         'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
        //         'method'  => 'POST',
        //         'content' => http_build_query($data),
        //     )
        // );
        // $context = stream_context_create($options);
        // $result = json_decode( file_get_contents($url, false, $context) );
        // var_dump($result);
        

    }

    public function getNormalAndLockedIssues() {
        
        if(strpos($this->host, "swatqa") == true) $host = "http://www.dewslandslide.com";
        else $host = $this->host;

        $normal = file_get_contents($host . '/issues_and_reminders/getAllNormal');
        $locked = file_get_contents($host . '/issues_and_reminders/getAllLocked');
        $archived = file_get_contents($host . '/issues_and_reminders/getAllArchived');
        $data = array(
            'code' => 'getNormalAndLockedIssues',
            'normal' => json_decode($normal),
            'locked' => json_decode($locked),
            'archived' => json_decode($archived)
        );

        return $data;
    }

}